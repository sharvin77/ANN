import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
url = "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
column_names = ["Sex", "Length", "Diameter", "Height", "Whole weight", "Shucked weight",
                "Viscera weight", "Shell weight", "Rings"]
data = pd.read_csv(url, names=column_names)

# Data preprocessing
# Convert categorical variable 'Sex' to numerical using one-hot encoding
data = pd.get_dummies(data, columns=["Sex"])

# Split the data into features and target variable
X = data.drop("Rings", axis=1)
y = data["Rings"]

# Task a) Predict the number of rings
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
reg_model = LinearRegression()
reg_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = reg_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Task a) Predict the number of rings")
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Task b) Predict the age of abalone
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
reg_model = LinearRegression()
reg_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = reg_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nTask b) Predict the age of abalone from physical measurements using linear regression")
print("Mean Squared Error:", mse)
print("R-squared:", r2)


print(y_pred[-5:])

# Plot the predicted vs. actual values
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Rings")
plt.ylabel("Predicted Rings")
plt.title("Predicted vs. Actual Rings")
plt.show()
